// TUI Application Example - Using ncurses library

// ============== ncurses Function Declarations ==============

// Initialization and cleanup
extern fn initscr() -> i32;
extern fn endwin() -> i32;
extern fn refresh() -> i32;
extern fn clear() -> i32;

// Input control
extern fn cbreak() -> i32;
extern fn noecho() -> i32;
extern fn getch() -> i32;
extern fn nodelay(win: i32, bf: i32) -> i32;

// Cursor and output
extern fn move(y: i32, x: i32) -> i32;
extern fn printw(str: i32) -> i32;
extern fn addch(ch: i32) -> i32;

// Attributes
extern fn attron(attrs: i32) -> i32;
extern fn attroff(attrs: i32) -> i32;

// ============== Application Logic ==============

fn draw_box(y: i32, x: i32, width: i32, height: i32) -> i32 {
    let i: i32 = 0;
    
    // Draw top edge
    move(y, x);
    i = 0;
    while (i < width) {
        addch(45);
        i = i + 1;
    }
    
    // Draw left and right edges
    i = 1;
    while (i < height) {
        move(y + i, x);
        addch(124);
        move(y + i, x + width - 1);
        addch(124);
        i = i + 1;
    }
    
    // Draw bottom edge
    move(y + height - 1, x);
    i = 0;
    while (i < width) {
        addch(45);
        i = i + 1;
    }
    
    return 0;
}

fn draw_menu(selected: i32) -> i32 {
    clear();
    
    // Title
    move(2, 10);
    attron(2048);
    addch(79);   // 'O'
    addch(108);  // 'l'
    addch(97);   // 'a'
    addch(110);  // 'n'
    addch(103);  // 'g'
    addch(32);   // ' '
    addch(84);   // 'T'
    addch(85);   // 'U'
    addch(73);   // 'I'
    attroff(2048);
    
    // Draw border
    draw_box(4, 8, 30, 10);
    
    // Menu items
    move(6, 10);
    if (selected == 0) {
        attron(262144);
        addch(32);  // ' '
        addch(62);  // '>'
        addch(32);  // ' '
        addch(83);  // 'S'
        addch(116); // 't'
        addch(97);  // 'a'
        addch(114); // 'r'
        addch(116); // 't'
        addch(32);  // ' '
        attroff(262144);
    } else {
        addch(32);  // ' '
        addch(32);  // ' '
        addch(32);  // ' '
        addch(83);  // 'S'
        addch(116); // 't'
        addch(97);  // 'a'
        addch(114); // 'r'
        addch(116); // 't'
        addch(32);  // ' '
    }
    
    move(8, 10);
    if (selected == 1) {
        attron(262144);
        addch(32);  // ' '
        addch(62);  // '>'
        addch(32);  // ' '
        addch(72);  // 'H'
        addch(101); // 'e'
        addch(108); // 'l'
        addch(112); // 'p'
        addch(32);  // ' '
        attroff(262144);
    } else {
        addch(32);  // ' '
        addch(32);  // ' '
        addch(32);  // ' '
        addch(72);  // 'H'
        addch(101); // 'e'
        addch(108); // 'l'
        addch(112); // 'p'
        addch(32);  // ' '
    }
    
    move(10, 10);
    if (selected == 2) {
        attron(262144);
        addch(32);  // ' '
        addch(62);  // '>'
        addch(32);  // ' '
        addch(81);  // 'Q'
        addch(117); // 'u'
        addch(105); // 'i'
        addch(116); // 't'
        addch(32);  // ' '
        attroff(262144);
    } else {
        addch(32);  // ' '
        addch(32);  // ' '
        addch(32);  // ' '
        addch(81);  // 'Q'
        addch(117); // 'u'
        addch(105); // 'i'
        addch(116); // 't'
        addch(32);  // ' '
    }
    
    // Help text
    move(15, 10);
    addch(85);  // 'U'
    addch(112); // 'p'
    addch(47);  // '/'
    addch(68);  // 'D'
    addch(111); // 'o'
    addch(119); // 'w'
    addch(110); // 'n'
    addch(32);  // ' '
    addch(97);  // 'a'
    addch(114); // 'r'
    addch(114); // 'r'
    addch(111); // 'o'
    addch(119); // 'w'
    addch(32);  // ' '
    addch(107); // 'k'
    addch(101); // 'e'
    addch(121); // 'y'
    addch(115); // 's'
    addch(32);  // ' '
    addch(45);  // '-'
    addch(32);  // ' '
    addch(113); // 'q'
    addch(58);  // ':'
    addch(81);  // 'Q'
    addch(117); // 'u'
    addch(105); // 'i'
    addch(116); // 't'
    
    refresh();
    return 0;
}

export fn main() -> i32 {
    let running: i32 = 1;
    let selected: i32 = 0;
    let key: i32 = 0;
    let key2: i32 = 0;
    let key3: i32 = 0;
    
    // Initialize ncurses
    initscr();
    cbreak();
    noecho();
    
    // Main loop
    while (running == 1) {
        draw_menu(selected);
        key = getch();
        
        // Detect ESC sequence (arrow keys)
        if (key == 27) {
            key2 = getch();
            if (key2 == 91) {
                key3 = getch();
                if (key3 == 65) {
                    if (selected > 0) {
                        selected = selected - 1;
                    }
                }
                if (key3 == 66) {
                    if (selected < 2) {
                        selected = selected + 1;
                    }
                }
            }
        }
        
        if (key == 10) {
            if (selected == 2) {
                running = 0;
            }
        }
        
        if (key == 113) {
            running = 0;
        }
    }
    
    // Cleanup
    endwin();
    
    return 0;
}
